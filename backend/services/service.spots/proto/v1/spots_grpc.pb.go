// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/v1/spots.proto

package spotspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotsClient is the client API for Spots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotsClient interface {
	GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotReply, error)
}

type spotsClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotsClient(cc grpc.ClientConnInterface) SpotsClient {
	return &spotsClient{cc}
}

func (c *spotsClient) GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotReply, error) {
	out := new(GetSpotReply)
	err := c.cc.Invoke(ctx, "/spots.Spots/GetSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotsServer is the server API for Spots service.
// All implementations must embed UnimplementedSpotsServer
// for forward compatibility
type SpotsServer interface {
	GetSpot(context.Context, *GetSpotRequest) (*GetSpotReply, error)
	mustEmbedUnimplementedSpotsServer()
}

// UnimplementedSpotsServer must be embedded to have forward compatible implementations.
type UnimplementedSpotsServer struct {
}

func (UnimplementedSpotsServer) GetSpot(context.Context, *GetSpotRequest) (*GetSpotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpot not implemented")
}
func (UnimplementedSpotsServer) mustEmbedUnimplementedSpotsServer() {}

// UnsafeSpotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotsServer will
// result in compilation errors.
type UnsafeSpotsServer interface {
	mustEmbedUnimplementedSpotsServer()
}

func RegisterSpotsServer(s grpc.ServiceRegistrar, srv SpotsServer) {
	s.RegisterService(&Spots_ServiceDesc, srv)
}

func _Spots_GetSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotsServer).GetSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spots.Spots/GetSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotsServer).GetSpot(ctx, req.(*GetSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spots_ServiceDesc is the grpc.ServiceDesc for Spots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spots.Spots",
	HandlerType: (*SpotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpot",
			Handler:    _Spots_GetSpot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/spots.proto",
}
